
import 'package:dio/dio.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:le_vie_app/shared/network/end_points.dart';
import 'package:le_vie_app/view/common_view/widgets.dart';




import '../../model/logedin_model.dart';
import '../../shared/network/dio_helper.dart';
import '../../shared/services/signin_service.dart';
import 'logein_states.dart';

class LoginCupit extends Cubit<LoginState>{

  LoginCupit() : super(IntiLoginState());
  static LoginCupit get(context)=>BlocProvider.of(context);
    
//-------------------------login and register-------------------------
  late Autogenerated loginModel;
  void userLogin(ctx,{required String email,required String pass})async{
    emit(LodingLoginState());
  await DioHelper.postData(
    url: LOGEIN,
    data:{
      'email':email,
      'password':pass,
    }).then((value) {
       loginModel=Autogenerated.fromJson(value.data);
      print(value.data);
      emit(ScLoginState(loginModel)); 
    }).catchError((onError){
      if(onError is DioError)
      {
        if(onError.message=="Http status error [400]"){
            buildToast(ctx, "Wrong username or pass");
        }else{
          buildToast(ctx, "Network Erorr");
        }
      }
      print('error from user login function ${onError.toString()}');
      emit(ErrorLoginState(onError.toString()));
    });
  }

  late Autogenerated loginModelRegiste;
  void registerLogin(UserLogIn user,String password,ctx)async{
  emit(LodingRegisteState());
  await DioHelper.postData(
    url: SIGNUP,
    data:{
      'email':user.email,
      'firstName':user.firstName,
      'lastName':user.lastName,
      'password':password,
    }).then((value) {
      loginModelRegiste=Autogenerated.fromJson(value.data);
      print("data is "+value.data.toString());
      //CachHelper.setData(key: "type", value: "signup");
      //type="signup";
      emit(ScRegisteState(loginModelRegiste));
    }).catchError((onError){
      if(onError is DioError)
      {
        if(onError.message=="Http status error [409]"){
           buildToast(ctx, "Email already exists");
        }else if(onError.message=="Http status error [400]"){
            buildToast(ctx, "password too weak or name is too short");
        }else{
          buildToast(ctx, "Network Erorr");
        }
      }
      print('error from user REGISTER function ${onError.toString()}');
      emit(ErrorRegisteState(onError.toString()));
    });
  }
//-------------------------------------------------------------------

//-------------------------face and google-------------------------
  late Autogenerated googelLogein;
  Future<void> userGoogelLogin({required GoogelAndFaceLogein token}) async {
    emit(LodingLoginState());
  await DioHelper.postData(
    url: GOOGEL,
    options: Options(contentType: 'application/json',),
    data:token.toJson()).then((value) {
      googelLogein=Autogenerated.fromJson(value.data);
      print("data is "+value.data.toString());
      //CachHelper.setData(key: "type", value: "google");
      //type="signup";
      emit(ScLoginState(googelLogein)); 
    })
    .catchError((onError){
      if(onError is DioError){
        print("dio erorr is "+onError.message);
      }
      print('error from userGoogelLogin function ${onError.toString()}');
      emit(ErrorLoginState(onError.toString()));
    });
  }
  
  googleSignIn() async {
    emit(LodingGoogleSignIn());
    SigninService googleService=SigninService();
   try{
        GoogelAndFaceLogein ?google=await googleService.signInWithGoogle();
         if(google!=null){
          await userGoogelLogin(token: google);
         }else{
           print("erorr in googleSignIn google is null ");
         }
        emit(ScGoogleSignIn());
    }catch(e){
        print("erorr in googleSignIn is "+e.toString());
        emit(ErrorGoogleSignIn(e.toString()));
    }
    
  }
  
  late Autogenerated facebooklLogein;
  Future<void> userfacebookLogin({required GoogelAndFaceLogein token}) async {
    emit(LodingLoginState());
    print("token is "+token.id!);
  await DioHelper.postData(
    url: FACEBOOK,
    options: Options(contentType: 'application/json',),
    data:{
      "id": token.id,
      "email": token.email,
      "firstName": token.firstName,
      "lastName": token.lastName,
      "photo": token.picture
      }
    ).then((value) {
      facebooklLogein=Autogenerated.fromJson(value.data);
      print("data is "+value.data.toString());
      //CachHelper.setData(key: "type", value: "google");
      //type="signup";
      emit(ScLoginState(googelLogein)); 
    })
    .catchError((onError){
      if(onError is DioError){
        print("dio erorr is "+onError.message);
      }
      print('error from userGoogelLogin function ${onError.toString()}');
      emit(ErrorLoginState(onError.toString()));
    });
  }
  
  facebookSignIn() async {
    emit(LodingFaceBookleSignIn());
    SigninService faceService=SigninService();
    try{
      print("start");
       GoogelAndFaceLogein ?facebook=await faceService.facebookSignInMethod();
         if(facebook!=null){
          await userfacebookLogin (token: facebook);
         }else{
           print("erorr in facebookSignIn facebook is null ");
         }
        emit(ScFaceBookleSignIn());
    }catch(e){
        print("erorr in facebookSignIn is "+e.toString());
        emit(ErrorFaceBookleSignIn(e.toString()));
    } 
  }
 //-------------------------------------------------------------------


 //-------------------------reset Pass-------------------------
  Future<void> forgetPass(ctx,{required String email}) async {
    emit(LodingForgetPass());
    await DioHelper.postData(
      data: {
        "email": email,
      },
      url: FORGETPASS,
    ).then((value) {
      print("ForgetPass data is "+value.data.toString());
      buildToast(ctx, value.data["message"]);
      emit(ScForgetPass());
    }).catchError((onError) {
      if(onError is DioError)
      {
        if(onError.message=="Http status error [404]"){
           buildToast(ctx, "User not found");
        }else{
          buildToast(ctx, "Network Erorr");
        }
      }
      print('error from ErrorForgetPass function ${onError.toString()}');
      emit(ErrorForgetPass(onError.toString()));
    });
  }

  Future<void> getOtp(ctx,{required String email,required String otp}) async {
    emit(LodingOTP());
    await DioHelper.postData(
      data: {
        "email": email,
        "otp":otp
      },
      url: OTP,
    ).then((value) {
      print("otp data is "+value.data.toString());
      buildToast(ctx, value.data["message"]);
      emit(ScOTP());
    }).catchError((onError) {
      if(onError is DioError)
      {
        if(onError.message=="Http status error [400]"){
           buildToast(ctx, "wrong Otp");
        }else{
          buildToast(ctx, "Network Erorr");
        }
      }
      print('error from ErrorOTP function ${onError.toString()}');
      emit(ErrorOTP(onError.toString()));
    });
  }

  Future<void> resetPass(ctx,{required String email,required String otp,required String pass}) async {
    emit(LodingResetPass());
    await DioHelper.postData(
      data: {
        "email": email,
        "otp":otp,
        "password":pass
      },
      url: RESETPASS,
    ).then((value) {
      print("reset-password data is "+value.data.toString());
      buildToast(ctx, value.data["message"]);
      emit(ScResetPass());
    }).catchError((onError) {
      if(onError is DioError)
      {
        if(onError.message=="Http status error [400]"){
           buildToast(ctx, "bad pass");
        }else{
          buildToast(ctx, "Network Erorr");
        } 
      }
      print('error from ErrorResetPass function ${onError.toString()}');
      emit(ErrorResetPass(onError.toString()));
    });
  }

//-------------------------------------------------------------------


//-------------------------loge out-------------------------
  googleLogeout() async {
    emit(LodingLogeOut());
    SigninService googleService=SigninService();
    try{
        await googleService.googelSignOut();
        emit(ScLogeOut());
    }catch(e){
        print("erorr in googleSignIn is "+e.toString());
        emit(ErrorLogeOut(e.toString()));
    }  
    
  }

  facebookLogeout() async {
    emit(LodingLogeOut());
    SigninService googleService=SigninService();
    try{
        await googleService.facebooklSignOut();
        emit(ScLogeOut());
    }catch(e){
        print("erorr in googleSignIn is "+e.toString());
        emit(ErrorLogeOut(e.toString()));
    }   
  }
//-------------------------------------------------------------------
}